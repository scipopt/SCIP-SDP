//-----------------------------------------------------------------
// Lint settings
//-----------------------------------------------------------------

-zero         // set exit code to 0

// ----------------------------------------------------------------
//    My error messages
// ----------------------------------------------------------------

-e537       // Repeated include file
-e1712      // allow to omit default constructs
-e717       // allow do ... while (0) constructs (appears in SCIP_CALL(...))
-e1702      // operator 'Name' is both an ordinary function 'String' and a member function 'String'
-e1725      // class member is a reference
-e834       // Operator followed by operator is confusing
-e866       // Unusual use of 'SYM' in argument to sizeof

-esym(578,scip)           // Declaration of symbol hides symbol

// The following happens quite often (and might be useful), but clutters the output
-e679  // Suspicious Truncation in arithmetic expression combining with pointer
-e451  // Header file repeatedly included but does not have a standard include guard

// temporary
-e818  // Pointer parameter could be declared as pointing to const
-e801  // Use of goto is deprecated

-emacro(527,CHECK_IF_SOLVED_BOOL) // Unreachable code

-emacro(506,SCIPdebugMessage) // Constant value Boolean
-emacro(681,SCIPdebugMessage) // Loop is not entered
-emacro(506,SCIPdebugMsg)         // Constant value Boolean
-emacro(681,SCIPdebugMsg)         // Loop is not entered
-emacro(506,SCIPdebugPrintf) // Constant value Boolean
-emacro(681,SCIPdebugPrintf) // Loop is not entered

-ecall(571,SCIPhashmapSetImage)   // Suspicious cast
-ecall(571,SCIPhashmapInsert)   // Suspicious cast
-ecall(679,SCIPhashmapSetImage)   // Suspicious Truncation
-ecall(776,SCIPhashmapSetImage)   // Possible truncation of addition

-emacro(506,SCIPallocBlockMemoryArray)     // Constant value Boolean
-emacro(571,SCIPreallocBlockMemoryArray)   // Suspicious cast
-emacro(571,BMSreallocBlockMemoryArray)   // Suspicious cast
-emacro(571,SCIPallocBlockMemoryArray)   // Suspicious cast
-emacro(571,BMSallocBlockMemoryArray)   // Suspicious cast

// Suspicious truncation:
-emacro(647,BMSclearMemoryArray)
-emacro(647,BMSallocMemorySize)
-emacro(647,BMSallocClearMemoryArray)
-emacro(647,BMSallocBufferMemoryArray)
-emacro(647,BMSallocBlockMemoryArray)
-emacro(647,BMSreallocBlockMemoryArray)
-emacro(647,BMSfreeBlockMemoryArray)
-emacro(647,BMSfreeBlockMemoryArrayNull)
-emacro(647,SCIPallocMemoryArray)
-emacro(647,SCIPallocBlockMemoryArray)
-emacro(647,SCIPfreeBlockMemoryArray)
-emacro(647,SCIPfreeBlockMemoryArrayNull)
-emacro(647,SCIPduplicateBlockMemoryArray)
-emacro(647,SCIPreallocBlockMemoryArray)
-emacro(647,SCIPallocBufferArray)
-emacro(647,SCIPreallocBufferArray)
-emacro(647,SCIPallocCleanBufferArray)

-emacro(732,SCIPfreeBlockMemoryArray)    // Loss of sign
-emacro(737,SCIPallocBlockMemoryArray)     // Loss of sign in promotion
-emacro(737,SCIPfreeBlockMemoryArray)     // Loss of sign in promotion
-emacro(737,SCIPreallocBlockMemoryArray)   // Loss of sign in promotion
-emacro(737,SCIPfreeBlockMemoryArrayNull)   // Loss of sign in promotion
-emacro(737,BMSallocBlockMemoryArray)   // Loss of sign in promotion
-emacro(737,BMSfreeBlockMemoryArray)   // Loss of sign in promotion
-emacro(737,BMSfreeBlockMemoryArrayNull)   // Loss of sign in promotion
-emacro(737,SCIPduplicateBlockMemoryArray)   // Loss of sign in promotion

// Avoid "Possible truncation of addition" - this might give interesting information, but clutters the output
-emacro(776,BMSmoveMemoryArray)
-emacro(776,BMSallocMemorySize)
-emacro(776,BMSclearMemoryArray)
-emacro(776,BMSallocMemoryArray)
-emacro(776,BMSfreeBlockMemoryArray)
-emacro(776,BMSfreeBlockMemoryArrayNull)
-emacro(776,BMSallocBlockMemoryArray)
-emacro(776,BMSallocBufferMemoryArray)
-emacro(776,BMSreallocBlockMemoryArray)
-emacro(776,BMSreallocBufferMemoryArray)
-emacro(776,BMSduplicateBlockMemoryArray)
-emacro(776,BMSduplicateBufferMemoryArray)
-emacro(776,SCIPallocMemoryArray)
-emacro(776,SCIPallocBlockMemoryArray)
-emacro(776,SCIPreallocBlockMemoryArray)
-emacro(776,SCIPfreeBlockMemoryArrayNull)
-emacro(776,SCIPduplicateMemoryArray)
-emacro(776,SCIPallocClearBufferArray)

-emacro(747,SCIPallocBlockMemoryArray)    // Significant prototype coercion

-emacro(681,SCIPdebugMessage) // Loop is not entered
-emacro(506,SCIPdebugPrintf) // Constant value Boolean
-emacro(681,SCIPdebugPrintf) // Loop is not entered
-emacro(506,SCIPdebugCheckRow) // Constant value Boolean
-emacro(506,SCIPdebugCheckImplic) // Constant value Boolean
-emacro(506,assert)           // Constant value Boolean

-esym(534,times)

// settings that just reduce output, but might discover correct errors:
// -e613       // Possible use of null pointer (usually not correct)
// -e666       // Expression with side effects passed to macro 'assert'
// -w2         // turn off informational messages
