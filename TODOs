- Allocate memory only once and reuse it instead of continually reallocating in many places.
- Safe varbounds in a sparse way in sdpi.
- MATLAB interface (will perhaps be done by Bin Liu from The University of New South Wales)
- replace EXTERN by SCIP_EXPORT for compatibility to newest SCIP version
- unify SDPsolverIsConverged (returns true if infeasible for Mosek but false for SDPA) and fix copy-paste error in ?IsDualFeasble? in SDPA [note that these are not used by SCIP-SDP, but only if someone would use sdpi as a standalone]
- rewrite SDPA-reader in C and make it more tailored to the data structures used since SCIP-SDP 2.0.0
- maybe also keep LP part in SDPI and only update for boundchanges

- implement additional branching rules
        - strong branching
        - strong branching as LP with fixed number of eigenvector cuts
        - pseudocost branching
        - reliability branching
        - SDP feasibility branching (see Diss Gally)
- try additional things for OBBT
        - OBBT as LP relaxation with fixed number of eigenvector cuts
        - Lagrangian variables bounds (need to check this theoretically) as in Ambros' paper
        - filtering problems to push further variables to their bounds
- implement additional cutting planes
        - SDP-knapsack cover cuts (see Diss Gally)
        - lift-and-project cuts (see Cezik/Iyengar)
        - SDP Chvatal-Gomory cuts (see Cezik/Iyengar and Diss Gally)
        - SDP Feasibility cuts using 2x2 subdeterminants (see Diss Gally)
- try additional things for warmstarts
        - rounding problems with penalty formulation
        - warmstart the rounding problems themself
        - try to find rules to decide whether to warmstart
- try Facial Reduction (currently being implemented by Bruno Figueira Lourenco)
- try additional SDP solvers
        - augmented Lagrangian solvers (would allow for easier warmstarts) [not PENSDP, as that seems to require linear independence for every single SDP constraint]
        - spectral bundle [only if assumptions are satisfied for current node]
- dynamically decide between LP and SDP relaxations depending on characteristics of the particular instance/relaxation
- think about ways to solve SDP relaxations with a single variable efficiently, e.g. for rounding heuristic
- think about ways of sparsifying the eigenvector cuts (compare paper by Ruth Misener and ???, see, e.g., Plenary talk at SCIP Workshop 2018)
- try Feasibility Pump (planned as Masterthesis to compare approaches where SDP-constraint is part of relaxation or part of rounding)
- think about using SDP-relaxations when solving QPs in SCIP

From Email with Chuen Teck See: Locking computes eigenvalues and it
make a quite long time if there are many variables. Think about
computing the eigenvalues at the beginning and reusing the
information.
