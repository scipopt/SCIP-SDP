the following important parameters (with these default values) that were added might be useful:

relaxing/SDP/freq = 1 // set this to -1 and lp/solvefreq to 1 to solve LP relaxations and add eigenvector cuts
propagating/sdpredcost/freq = 1 // set this to -1 to disable reduced cost fixing for SDPs
relaxing/SDP/sdpsolverepsilon = 0.001 // sets the bound for the duality gap in the SDP-Solver and also the difference that is allowed when fixing variables before inserting into the SDP-solver
relaxing/SDP/sdpsolverfeastol = 0.000001 // a matrix is considered positive semidefinite if the smallest eigenvalue is bigger than -sdpsolverfeastol
relaxing/SDP/threads = 1 // number of threads to use for the SDP-Solver, currently only supported for SDPA
relaxing/SDP/sdpinfo = FALSE // Should output of the SDP-Solver be printed to the console ?
relaxing/SDP/objlimit = FALSE // Should an objective limit be given to the SDP-Solver ?
relaxing/SDP/slatercheck = FALSE // Should the slater condition for the dual problem be check ahead of solving each SDP?
branching/sdpobjective/coupledvars = FALSE // If all branching candidates have objective zero, should we use the sum of the absolute objectives of all continuous variables coupled with the candidate through constraints ?
branching/sdpobjective/singlecoupledvars = FALSE // If all branching candidates have objective zero, should we use the sum of the absolute objectives of all continuous variables coupled with the candidate through constraints in which no other candidate appears ?
branching/sdpinfobjective/coupledvars = FALSE // If all branching candidates have objective zero, should we use the sum of the absolute objectives of all continuous variables coupled with the candidate through constraints ?
branching/sdpinfobjective/singlecoupledvars = FALSE // If all branching candidates have objective zero, should we use the sum of the absolute objectives of all continuous variables coupled with the candidate through constraints in which no other candidate appears ?
