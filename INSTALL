SDP-Plugin for SCIP

Install-instructions
=====================

Additional Software
------------------------------------
For using the SDP-Plugin for SCIP you need an installed and fully working version
of SCIP 3.2 (http://scip.zib.de/) or higher. Additionally you should install at
least one of the following SDP-Solvers (please note, that the interface to SDPA
is still in beta-state):
DSDP 5.8 (http://www.mcs.anl.gov/hs/software/DSDP/).
SDPA 7.3.8 (http://sdpa.sourceforge.net/)

Build SDP-Plugin
----------------
Now you are able to install the SDP-Plugin. It uses the SCIP-Makefiles for 
building. After unpacking the files you need to set a symbolic link to your
SCIP directory in the lib-subdirectory, this can be done via

mkdir lib
cd lib
ln -s /home/username/scipoptsuite-3.2.0/scip-3.2.0/scip/
cd ..

if /home/username/scipoptsuite-3.2.0/scip-3.2.0 is the path to your SCIP directory.
Afterwards you can use "make" to compile the plugin. For SCIP-SDP the option SDPS
is mandatory, it defines the SDP-solver that should be used. You can choose between
dsdp, sdpa and none. In the latter case you can then only use LP-relaxations with
additional cutting planes enforcing the positive semidefiniteness and need to
disable SDP-relaxations by setting the relaxing/SDP/freq to -1 and lp/solvefreq
to 1. So for example to compile SCIP-SDP with DSDP, just type

make SDPS=dsdp

in the main directory. In addition to SDPS you can use the same options for the Makefile 
as you can use for building SCIP (i.e. make OPT=dbg, LPS=cpx), you may also create
a doxygen-documentation by calling i.e. make OPT=dbg SDPS=dsdp doc.

After calling "make" with an SDPS-option other than none, you will be asked for paths
to your installation of the SDP-solver and possibly other libraries. For example for 
DSDP you need to enter (assuming again an installation path of /home/username/DSDP5.8

- preparing missing soft-link "lib/dsdpinc":
> Enter soft-link target file or directory for "lib/dsdpinc" (return if not needed): 
> /home/username/DSDP5.8/include/

- preparing missing soft-link "lib/libdsdp.a":
> Enter soft-link target file or directory for "lib/libdsdp.a" (return if not needed): 
> /home/username/DSDP5.8/lib/libdsdp.a 

In case of SDPA you also need to install openblas and in this case the links are

- preparing missing soft-link "lib/sdpainc":
> Enter soft-link target file or directory for "lib/sdpainc" (return if not needed):
> /home/username/sdpa.7.3.8/include/

- preparing missing soft-link "lib/libsdpa.a":
> Enter soft-link target file or directory for "lib/libsdpa.a" (return if not needed):
> /home/username/sdpa.7.3.8/lib/libsdpa.a

- preparing missing soft-link "lib/libsdpa.so":
* this soft-link is not necessarily needed since "lib/libsdpa.a" already exists - press return to skip
> Enter soft-link target file or directory for "lib/libsdpa.so" (return if not needed):
> 

- preparing missing soft-link "lib/mumpslib":                     
> Enter soft-link target file or directory for "lib/mumpslib" (return if not needed):
> /home/username/sdpa.7.3.8/sdpa-7.3.8/mumps/build/lib/

- preparing missing soft-link "lib/mumpslibseq":
> Enter soft-link target file or directory for "lib/mumpslibseq" (return if not needed):
> /home/username/sdpa.7.3.8/sdpa-7.3.8/mumps/build/libseq/

- preparing missing soft-link "lib/libopenblas.so.0":
> Enter soft-link target file or directory for "lib/libopenblas.so.0" (return if not needed): 
> /home/username/openblas/lib/libopenblas.so.0 

The success of the installation can now be tested via make test by typing for example

make SDPS=dsdp test

where you have to use the same options you included in your make command.

To use the SDP-Plugin call

./bin/scipsdp

to open a SCIP shell for solving MISDPs. There you can read a sparse SDPA-File with added
integrality constraints (for details about the format see data_format.txt) named 
instancefile.dat-s by calling

read instancefile.dat-s

followed by 

optimize

as in the usual SCIP shell. You can test this with the examples in the "instances"-subfolder.

If you compiled SCIP-SDP with SDPA and openblas, the BLAS/LAPACK routines can be run multithreaded.
For this you have to set the corresponding environment variable by typing

export OMP_NUM_THREADS=n

where n is the desired number of threads.
