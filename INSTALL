SDP-Plugin for SCIP

Install-instructions
=====================

Additional Software
------------------------------------
For using the SDP-Plugin for SCIP you need an installed and fully working version
of SCIP 4.0 (http://scip.zib.de/) or higher. Additionally you may want to install
at least one of the following SDP-Solvers:

DSDP 5.8 (http://www.mcs.anl.gov/hs/software/DSDP/).
SDPA 7.3.8 (http://sdpa.sourceforge.net/)
MOSEK 8.0.0.x (https://www.mosek.com/)

Build SDP-Plugin
----------------
Now you are able to install the SDP-Plugin. It uses the SCIP-Makefiles for 
building. After unpacking the files you need to set a symbolic link to your
SCIP directory in the lib-subdirectory, this can be done via

mkdir lib
cd lib
ln -s /home/username/scipoptsuite-4.0/scip-4.0/ scip
cd ..

if /home/username/scipoptsuite-4.0/scip-4.0 is the path to your SCIP directory.
Afterwards you can use "make" to compile the plugin. For SCIP-SDP the option SDPS
is mandatory, it defines the SDP-solver that should be used. You can choose between
dsdp, sdpa, msk and none. In the latter case you can only use LP-relaxations with
additional cutting planes enforcing the positive semidefiniteness and need to
disable SDP-relaxations by setting the relaxing/SDP/freq to -1 and lp/solvefreq
to 1. So for example to compile SCIP-SDP with DSDP, just type

make SDPS=dsdp

in the main directory. Furthermore, you may need to set OMP=false if you do not have
OpenMP. This disables the possibility to set the number of threads dynamically via
SCIP-parameter for SDPA/openblas. Additionally, you can use the same options for the 
Makefile as you can use for building SCIP (i.e. make SDPS=sdpa OPT=dbg LPS=cpx), note that 
a compiled SCIP binary with the same settings needs to exist in the linked path. You may 
also create a doxygen-documentation by calling i.e. make OPT=dbg SDPS=dsdp doc.

Setting Links for DSDP
----------------------

After calling "make" with an SDPS-option other than none, you will be asked for paths
to your installation of the SDP-solver and possibly other libraries. For example for 
DSDP (assuming an installation path of /home/username/DSDP5.8 ) you need to enter 

- preparing missing soft-link "lib/dsdpinc":
> Enter soft-link target file or directory for "lib/dsdpinc" (return if not needed): 
> /home/username/DSDP5.8/include/

- preparing missing soft-link "lib/libdsdp.a":
> Enter soft-link target file or directory for "lib/libdsdp.a" (return if not needed): 
> /home/username/DSDP5.8/lib/libdsdp.a 

Setting Links for SDPA
----------------------

In case of SDPA you also need to install openblas and in this case the links are (please
note that you do not need to give the link to libsdpa.so if you linked to libsdpa.a, but 
you do need to link to both lib and libseq for mumps):

- preparing missing soft-link "lib/sdpainc":
> Enter soft-link target file or directory for "lib/sdpainc" (return if not needed):
> /home/username/sdpa.7.3.8/include/

- preparing missing soft-link "lib/libsdpa.a":
> Enter soft-link target file or directory for "lib/libsdpa.a" (return if not needed):
> /home/username/sdpa.7.3.8/lib/libsdpa.a

- preparing missing soft-link "lib/libsdpa.so":
* this soft-link is not necessarily needed since "lib/libsdpa.a" already exists - press return to skip
> Enter soft-link target file or directory for "lib/libsdpa.so" (return if not needed):
> 

- preparing missing soft-link "lib/mumpsinc":
> Enter soft-link target file or directory for "lib/mumpsinc" (return if not needed): 
> /home/username/sdpa-7.3.8/mumps/build/include/

- preparing missing soft-link "lib/mumpslib":                     
> Enter soft-link target file or directory for "lib/mumpslib" (return if not needed):
> /home/username/sdpa.7.3.8/mumps/build/lib/

- preparing missing soft-link "lib/mumpslibseq":
> Enter soft-link target file or directory for "lib/mumpslibseq" (return if not needed):
> /home/username/sdpa.7.3.8/mumps/build/libseq/

- preparing missing soft-link "lib/libopenblas.so.0":
> Enter soft-link target file or directory for "lib/libopenblas.so.0" (return if not needed): 
> /home/username/openblas/lib/libopenblas.so.0 

Setting Links for MOSEK
----------------------

For SDPS=msk the following links need to be set, where /home/username/mosek is the path to the
mosek directory. Please note that the omp and cilk (for MOSEK 8) libraries must be available
in the same directory given for the mosek library.

- preparing missing soft-link "lib/include/mosekh":
> Enter soft-link target file or directory for "lib/include/mosekh" (return if not needed):
> /home/username/mosek/8/tools/platform/linux64x86/h/

- preparing missing soft-link "lib/shared/libmosek64.so":
> Enter soft-link target file or directory for "lib/shared/libmosek64.so" (return if not needed): 
> /home/username/mosek/8/tools/platform/linux64x86/bin/libmosek64.so

Testing the Installation
------------------------

The success of the installation can now be tested via make test by typing for example

make SDPS=dsdp test

where you have to use the same options you included in your make command. Please note that
when using SDPA, you will get messages 

pFEAS_dINF criteria :: line 1211 in sdpa_parts.cpp

between the SCIP output. This is output given by SDPA whenever a problem is infeasible
and cannot be deactivated. Within a branch-and-bound context it is normal for infeasible
problems to appear, so this is not a sign of an unsuccessfull installation or a bug.

Usage of SCIP-SDP
-----------------

To use the SDP-Plugin call

./bin/scipsdp

to open a SCIP shell for solving MISDPs. There you can read a sparse SDPA-File with added
integrality constraints (for details about the format see data_format.txt) named 
instancefile.dat-s by calling

read instancefile.dat-s

followed by 

optimize

as in the usual SCIP shell (for more details about the SCIP shell please refer to the SCIP 
documentation and FAQ). You can test this with the examples in the "instances"-subfolder.

Parallelization for SDPA
------------------------

If you compiled SCIP-SDP with SDPA and OpenBLAS, the OpenBLAS routines can be run multithreaded.
For this you have to set the corresponding environment variable by typing

export OMP_NUM_THREADS=n

before opening the shell, where n is the desired number of threads.

Alternatively, if you have OpenMP, you may also compile SCIP-SDP with OMP=true (which is
the default for SDPS=sdpa). Then you can change the number of threads via SCIP-parameter:

set constraints SDP advanced threads n

Parallelization for MOSEK
------------------------

If you compiled SCIP-SDP with MOSEK, the SDP-solver of MOSEK can be run multithreaded using
the parameter

set relaxing SDP advanced sdpsolverthreads n

By default this parameter is set to -1 to automatically detect the number of cores. Note that
this will only parallelize the solution of the SDP-relaxations but not the eigenvalue
computations in SCIP-SDP, unlike the parallelization for OpenBLAS/SDPA.
