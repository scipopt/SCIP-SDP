fixed bugs:
- fixed the output of the line number when reading CBF files
- fixed one memory bug and one missing check in diagZeroImpl()
- fixed bug in multiaggrVar() with negative coefficients and locking
- fixed bug in presolving which sometimes avoided the addition of linear constraints

features:
- add possiblitiy to tighten matrices if all matrices are positive semidefinite
- add possiblitiy to tighten bounds if all matrices are positive semidefinite

SCIP-SDP version 3.2.0
======================

interface:
- changed name of shell to "SCIP-SDP"
- increase output precision of CBF-files to 15 digits
- introduced function SCIPSDPincludeDefaultPlugins() that includes everything needed for SCIP-SDP
- SCIPconsSdpCheckSdpCons(): removed parameters checkintegrality, checklprows
- SCIPconsSdpComputeUbSparseSdpMatrixLength(): remove parameter scip

fixed bugs:
- fixed bug with statistics output when no SDPs were solved
- fixed minor bug in CBF-reader when reading DCOORD
- fixed bug with wrong matrix sizes in warmstarting code
- disabled the sdpobbt propagator if the SDP-relaxator is not available
- fixed memory leak in prop_sdpredcost with restarts
- only add presolving linear constraints once

features:
- add error messages to SDPA-format reader
- fix parsing of integer variables in SDPA-format
- add support for reading CBF-files in primal and mixed primal-dual form
- unify nomenclature, e.g., variable names, in CBF reader
- add more error messages to CBF reader
- add linenumbers to error messages in CBF reader
- the variable locks are now updated in presolving
- presolving techniques directly update bounds instead of adding constraints if possible
- unlocking variables is now faster (do not need to recompute eigenvalues in this case)
- adapted several code parts to newer SCIP versions and using new features
- add support for rank-1 constraints for psd variables and SDP-constraints by extending the SDP constraint handler, which now includes the following:
  - add one new parameter quadconsrank1 to ConshdlrData of cons_sdp
  - add three new variables rankone, maxevsubmat, addedquadcons to ConsData of cons_sdp
  - introduce function isMatrixRankOne() to check whether a matrix has rank 1
  - adapt locking mechanism to rank-1 constraints
  - introduce function enforceRankeOne() to enforce the rank-1 constraint for a given solution
  - for each constraint, if it should be rank one, all quadratic constraints given by the 2x2 principal minors are added in ConsInitSol,
    since a psd matrix has rank 1 if and only if all its 2x2 principal minors are zero.
  - add printing and parsing of rank-1 information in .cip-format as "rank1? 0/1"
  - SCIPconsSdpGetData(): add parameter rankone, maxevsubmat, addedquadcons
  - SCIPcreateConsSdp(): add parameter rankone
  - introduce function SCIPconsSdpShouldBeRankOne()
  - introduce function SCIPconsSdpGetMaxEVSubmat()
  - introduce function SCIPconsSdpAddedQuadCons()
  - introduce keywords PSDVARRANK1 and PSDCONRANK1 in reader_cbf.c for specifying psd variables and SDP-constraints with a rank-1 constraint
  - the new features are accessible via the virtual constraint handler SDPrank1 (SCIPcreateConsSdpRank1)
  - a new heuristic tries to construct rank1 solutions (parameter rank1approxheur; disabled by default)
- unify handling of LAPACK calls: there now is only one file "lapack_interface" instead of two (lpapack_sdpa, lapack_dsdp).
- two new presolving routines that add linear constraints, which are then propagated to possibly improve variable bounds
  (applied with parameters "constraints/SDP/twominorlinconss" and "constraints/SDP/twominorprodconss")
- add support for upgrading quadratic constraints to SDP rank1 constraints:
  - parameter upgradquadconss: turns upgrading on
  - in addition: parameter upgradekeepquad only adds SDP constraint as a relaxation
  - the upgrading is only performed if the number of variables and constraints is at most maxnvarsquadupgd

makefile:
- add project makefile in make/make.scipsdpproj
- reorganize main makefile to use make.scipsdpproj
- fix some minor issues in makefile concerning building with shared libraries
- use (pc)lint files from SCIP



SCIP-SDP version 3.1.2
======================

fixed bugs:
- fixed bug that could lead to segmentation faults after restarts when using the analytic center warmstarts
- sdpfracdiving only runs if the last SDP solve was outside of probing (before it could run directly after, e.g., sdp-obbt, which
  could lead to solutions with wrong objective values given to SCIP, since the objective values could still relate to those of the
  previous probing run)
- added additional tolerance factor (currently 1000) to sdp-obbt and only accept bound changes with improvement at least
  tolerance factor * gaptol (before smaller changes were also accepted, which, especially on integer variables, could lead
  to incorrect cutoffs or bound changes if these small differences were only caused by inaccuracy of the SDP solver)
- check for time limit during probing SDP within obbt-propagator to not return wrong cutoffs
- check for unboundedness in sdp-obbt problems
- explicitly handle unboundedness of the penalty problem
- fixed potential segmentation fault when reading cbf-files without any (SDP-)constraints or constant part
- fixed bug in cbf reader where equality constraints with right hand side zero were ignored
- return with reader error in optimized mode in CBF reader
- fixed bug with empty DCOORD section in CBF file reader
- make sure that matrix is in lower triangular form in CBF file reader

performance improvements:
- delay sdp-obbt if cutoffbound resulted from objective propagation only or the trivial heuristic, instead rerun after cutoffbound changed
  for the current node

interface:
- updated MOSEK interface to MOSEK 9

features:
- when reading CBF files, we now also allow that the conic parts appear multiple times, which are then aggregated
- allow to read CBF file version 2 (but do not support additional cones)
- CBF files: allow conic parts of constraints in different order
- CBF file: add more syntatic correctness checks


SCIP-SDP version 3.1.1
======================

fixed bugs:
- fixed potential segmentation fault if relaxator or redcost propagator were freed before initsol
- fixed potential segmentation fault caused by total number of nonzeros not being computed by SDP-constraint-parser for CIP format
- do not run sdp-obbt if relaxation solution is not valid
- changed relaxexit-callback to relaxexitsol for consistency and to avoid missing releaseVariables in UG

interface:
- add dat-s-ind reader to read instances in extended sdpa format with negative sign of variable index for indicator variables

parameters:
- added additional parameter "relaxing/SDP/peninfeasadjust" to increase numerical stability by only allowing cutoffs through the penalty
  formulation if the objective value of the feasilibity problem is at least this factor larger than the gap- and feasibility tolerance
  (default value is 10)
- changed restarts, cutagelimits and separating/maxrounds back to their SCIP defaults

Makefile:
- added experimental cmake support


SCIP-SDP version 3.1.0
======================

features:
- added possibility to warmstart SDPA and DSDP (deactivated by default) in several different ways, for details see parameter list in
  documentation and release report
- SCIP-SDP statistics are now included in SCIP statistics through new statistics table plugin type (old statistics output can still be
  activated via parameter relaxing/SDP/displaystatistics)
- compute and output constraint violations also for SDP constraints

performance improvements:
- accept solutions if MOSEK stalled but solutions are (almost) feasible (which is rechecked in the sdp interface later for the dual
  solution) and the duality gap is below the tolerance

parameters:
- changed default duality gap tolerance for MOSEK to 1e-5

core:
- adjustments for changes in SCIP relaxation solution enforcement


SCIP-SDP version 3.0.1
======================

fixed bugs:
- only declare problem infeasible in sdpredcost if lower bound exceeds upper bound by at least feastol (instead of epsilon)
- only change bounds in sdpredcost if they changed by more than feastol instead of epsilon (could lead to asserts for
  integer variables which are later rounded according to feastol)
- also compute objective values by hand for SDPA (like for MOSEK and DSDP), since returned objective sometimes does not match
  returned solution perfectly, which leads to errors inside SCIP

performance improvements:
- only create (and use) startsettings constraint handler for SDPA

core:
- disable dual propagators for reoptimization

makefile:
- added "make libscipsdp" to compile as library (needed, e.g., for parallelization via UG)


SCIP-SDP version 3.0.0
======================

fixed bugs:
- the SDPA interface incorrectly reused the settings of the last node instead of the parent node
- fixed fast/penalty/unsolved display columns to divide by number of interface calls instead of
  number of solver calls (which includes multiple calls for penalty formulation etc.)
- in SDPA interface if parent node used default settings, now continue with stable settings
  afterwards instead of directly moving to penalty formulation
- fixed memory leaks for fixed and (multi-)aggregated variables and in sdp-obbt
- input values are now checked against epsilon instead of feastol for detecting nonzeros
- only fix variables locally if lb-ub < epsilon instead of feastol
- feasibility is no longer checked against sdpsolverfeastol but instead against feastol everywhere
  (sdpsolverfeastol is now only used internally for the SDP-solver)
- immediately resolve SDP-relaxations if the required tolerance was not met by the solver
- fixed a problem which could lead to errors when the sdpredcost-propagator asked for information
  after the SDP-solver hit the SCIP-timelimit

features:
- readded "diagzeroimpl" cuts in presolving which enforce nonzero diagonal entries if a nonzero
  entry exists in the constant matrix for the corresponding row or column (under some prerequisites)

interface:
- added interface to MOSEK
- added reader for CBF format

parameters:
- The "diagzeroimpl" and diagonal >= 0 cuts of the SDP constraint handler can now be disabled through
  the parameters "constraints/SDP/diagzeroimplcuts" and "constraints/SDP/diaggezerocuts".
- "sdpsolverepsilon" has been renamed to "sdpsolvergaptol" to make the usage clearer
- The number of threads for MOSEK can be set via "relaxing/SDP/sdpsolverthreads"
- The maximum number of increases of the penaltyparameter and maximum number of decreases of the feasibility
  tolerance before declaring a problem unsolvable and continueing with the bound of the parent node can now
  be set via "relaxing/SDP/npenaltyincr"

core:
- adjusted SCIP-SDP to new enforelax callback in SCIP; this now allows to combine SCIP-SDP with other nonlinear
  constraints/constraint handlers

makefile:
- set links to mumps libraries instead of library folder
- All internal and external libraries are placed in lib/static and lib/shared, the include files are in lib/include.
- Current check scripts are now copied directly from the chosen SCIP directory.

SCIP-SDP version 2.1.0
======================

fixed bugs:
- current iterate is now correctly reset when changing parameters in SDPA
- parameters for SDPA are now set before inserting the problem so that they are also used for computing the initial point
- changed default lambda star parameter in SDPA to reduce aborts in infeasible subproblems
- changed default penalty parameter in DSDP to prevent cases where optimal solutions within the feasibility tolerance
  where cut off by DSDP
- fixed bug in reader that resulted in wrong computation of LP-row-indices when using multiple LP-blocks and could lead
  to segmentation faults
- infeasibility-status for presolving was not correctly reset after changing bounds
- check again for all variables fixed after local presolving, problems without variables may not be given to SDPA
- fixed some wrong asserts that used epsilon instead of feasibility tolerance
- one array in the SDPA interface was not properly resized after loading a second, bigger problem into the same SCIP shell
- number of SDP iterations now includes all solved SDPs, including those which were later resolved with different settings
  or the penalty formulation

features:
- added possibility to also check primal slater condition and output statistics in the end
- added diving heuristic for SDPs (disabled by default) [please note: This requires SCIP version 4.0 or higher and is 
  disabled for SCIP version 3.2.1 or lower]
- added randomized rounding heuristic for SDPs [please note: This requires SCIP version 4.0 or higher and is 
  disabled for SCIP version 3.2.1 or lower]
- added optimization-based bound tightening for SDPs (disabled by default) [please note: This requires SCIP version 4.0 
  or higher and is disabled for SCIP version 3.2.1 or lower]

performance improvements:
- in case of numerical problems in SDPA, child nodes are no longer tried to solve with fast settings in SDPA, but instead with
  whatever settings worked for the parent node (this can be controlled via parameter)

interface:
- added possibility to read and write in .cip format
- when using DSDP, the time limit is now checked after each iteration

parameters:
- penalty parameter to be used for numerically hard relaxations can now be changed by a parameter
- lambda star parameter for initial point in SDPA can now be changed by a parameter
- frequency of parameter resets in SDPA can be set by a parameter
- number of threads for SDPA/Openblas can now be changed via parameter if OpenMP is installed
- slatercheck is now an int parameter that also determines whether Slater results should be printed to console or
  only displayed as statistics in the end
- added parameter to control output of statistics after quitting SCIP-SDP

core:
- if an SDP relaxation cannot be solved, it is first checked for feasibility using an adjusted penalty formulation
  and only if the problem cannot be shown to be infeasible this way, a different penalty formulation is used to 
  solve the problem with the original objective function
- in the penalty formulation the primal bound added by the penalty parameter is now also checked to decide between
  increasing the penalty parameter or decreasing the feasibility tolerance, also the best lower bound computed by the
  penalty formulation is now used in SCIP even if the corresponding solution is not feasible in the original
  formulation

misc:
- percentage of unsolved SDP relaxations are now displayed in the shell; percentage of instances solved using the fastest
  settings (for SDPA, for DSDP this is the number of problems solved with the original formulation) and solved using the
  penalty formulation can also be displayed but are disabled by default
- statistics about number of SDP iterations, percentage of solved SDPs and (if enabled via parameter) percentage of 
  problems satisfying the Slater condition are now displayed after quitting SCIP-SDP


SCIP-SDP version 2.0.0
======================

fixed bugs:
- if DSDP does not converge but produces primal and dual feasible solutions, these are no longer accepted as optimal
- reader no longer crashes because of comment-lines between SDP/LP-block-lines
- value 0 in the last LP-block-line no longer causes an infinite loop
- non-numbers in the SDP/LP-block-lines and lines with more or less than five entries no longer cause infinite loops
  or get cut off or combined with others rows, but cause exits with meaningful error messages
- removed the diagDominant-cuts that are only correct for general MISDPs under some prerequisites

data structures:
- now uses arrays for the nonzeros instead of the SDP-cone class

features:
- dual/reduced cost fixing for SDPs
- added branching rules, as some of the SCIP branching rules only work on LP-solutions

performance improvements:

interface:
- added a more modular SDP-Interface and removed direct DSDP-references from the SCIPSDP-core-code
- added beta version of interface to SDPA

parameters:
- can now specify epsilon and feasibility tolerance for the SDP-solver specifically
- can specify whether an objective limit should be set for the SDP-solver
- can choose to display output of SDP-solver
- can choose to check slater condition in the dual problem ahead of solving the SDPs
- for a full list check the parameters tab in the documentation

core:
- transferred all code except for reader and SDPA-interface from C++ to C
- now uses the SCIP shell
- added SCIP 3.2.0 support
- bounds from SCIP are no longer transformed into LP-rows but are given to the SDP Solver (specifically DSDP, for SDPA 
  they still need to be transformed) as bounds

Makefile:
- creates extra directory sdpi for SDP-Interface
- SDP-solver is now specified via make option SDPS=...
- links are now set via console when calling make instead of the make.local file

misc:
- total and average SDP-iterations are displayed in the shell
